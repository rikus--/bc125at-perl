#!/usr/bin/perl

# Copyright (c) 2013, Rikus Goodell.
#
# All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

use strict;
use warnings;

use Getopt::Long 'GetOptionsFromArray';

use FindBin;
use lib "$FindBin::Bin/lib";

use Bc125At::Command;
use Bc125At::Interactive;
use Bc125At::Detect;
use Bc125At::Version;

#my $tty = Bc125At::Detect::probe(); # undef ok
my $scanner;
my $prog;

my ($command, $subcommand, @args) = @ARGV;

_usage() unless $command;

$SIG{INT} = sub { exit };

if ($command eq 'channel') {
    _usage() unless $subcommand;
    $scanner = Bc125At::Command->new();
    if ($subcommand eq 'read') {    # read from scanner
        _prog();
        my ($filename, $impatient);
        GetOptionsFromArray(
            \@args,
            'file=s'  => \$filename,
            impatient => \$impatient
          )
          and $filename
          or _usage();
        my $info = $scanner->get_all_channel_info($impatient ? 1 : 0);
        Bc125At::Command::dumper($filename, $info, 'channel');
    }
    elsif ($subcommand eq 'write') {    # write to scanner
        _prog();
        my ($filename);
        GetOptionsFromArray(\@args, 'file=s' => \$filename) and $filename
          or _usage();
        $scanner->write_channels($filename);
    }

}
elsif ($command eq 'search') {
    _usage() unless $subcommand;
    $scanner = Bc125At::Command->new();
    if ($subcommand eq 'read') {
        _prog();
        my $filename;
        GetOptionsFromArray(\@args, 'file=s' => \$filename,) and $filename
          or _usage();
        my $info = $scanner->get_all_search_group_info();
        Bc125At::Command::dumper($filename, $info, 'search');
    }
    elsif ($subcommand eq 'write') {
        _prog();
        my $filename;
        GetOptionsFromArray(\@args, 'file=s' => \$filename) and $filename
          or _usage();
        $scanner->write_search_groups($filename);
    }
}
elsif ($command eq 'interactive') {
    Bc125At::Interactive::run();
}
elsif ($command eq 'detect') {
    Bc125At::Detect::detect();
}
elsif ($command eq 'driver') {
    Bc125At::Detect::setup_driver();
}
elsif ($command eq 'gui') {
    require Bc125At::GUI;
    my $gui = Bc125At::GUI->new();
    my $scanner = $gui->main;             # Let GUI create Bc125At::Command object to delay failure until UI is set up. Returns it at the end for cleanup.
    $prog    = 1;                         # Send extra EPG on exit, just in case.
}
else { _usage() }

sub _usage {
    print "bc125at-perl version $Bc125At::Version::version\n\n";

    my $usage;
    while (<DATA>) {
        print if $usage;
        print "usage:\n" and ++$usage if /^=head1 COMMANDS/;
    }
    exit 1;
}

sub _prog {
    $prog = 1;
    $scanner->begin_program() if $scanner;
}

END {
    $scanner->end_program() if $scanner && $prog;
}

__DATA__

=head1 NAME

bc125at-perl

=head1 DESCRIPTION

A tool for programming the Uniden BC125AT scanner on Linux.
Currently supports a limited subset of the complete set
of available commands, but enough to get the most important
things done.

=head1 GETTING STARTED

Connect the scanner using the USB cable. In order to get the
/dev/ttyACM0 device set up, run as root:

   bc125at-perl driver

If this succeeds, you should now have a /dev/ttyACM0 device
that is set up to point to the correct USB device and emulate
a traditional serial port, allowing the commands below to be used.
If you want to run bc125at-perl as a non-root user, you will need
to manually adjust the permissions of /dev/ttyACM0 to be readable
and writable by the user you want to use.

=head1 COMMANDS

bc125at-perl channel read --file freqs.txt [--impatient]

   Loads the channels currently stored in the scanner into the
   specified file, which may be edited and then reloaded into the
   scanner. The --impatient option may be used if you want to stop
   trying to load as soon as you hit several frequencies in a row
   which have not been set yet (under the assumption that all
   subsequent frequencies will also be zero).

bc125at-perl channel write --file freqs.txt

   Loads the channels defined in freqs.txt and writes them to the
   scanner. WARNING: This is a destructive operation! In other
   words, doing this will cause your existing channels defined
   in the scanner to be overwritten (hopefully with meaningful
   values, but the author of this software takes no responsibility
   for harm or loss of data that may occur as a result of its use).

bc125at-perl search read --file search.txt

   Read the search groups from the scanner into the specified text
   file.

bc125at-perl search write --file search.txt

   Writes the search groups defined in the specified text file to
   the scanner.

bc125at-perl interactive

   Start an interactive session through which commands may be sent
   to the scanner. As of Feb 2013, this document is available from
   Uniden as a reference:
   http://info.uniden.com/twiki/pub/UnidenMan4/BC125AT/BC125AT_PC_Protocol_V1.01.pdf

bc125at-perl detect

   Check to see if a compatible device is attached. If this fails,
   then you're not going to have much luck doing anything else.
   Note that this is a passive action and doesn't load the driver.
   If you want to load the driver, use the 'driver' command.

bc125at-perl driver

   Attempt to set up the driver for the device. This involves loading
   the 'usbserial' kernel module and creating a device in /dev.

bc125at-perl gui

   Load the GUI.

